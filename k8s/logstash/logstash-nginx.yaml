apiVersion: logstash.k8s.elastic.co/v1alpha1
kind: Logstash
metadata:
  name: logstash-nginx
spec:
  count: 1
  elasticsearchRefs:
    - name: elasticsearch
      clusterName: helk
  version: 8.8.2
  podTemplate:
    spec:
      containers:
      - name: logstash
        env:
          - name: LS_JAVA_OPTS   
            value: "-Xmx2g -Xms2g"
          - name: KAFKA_HOST 
            value: "kafka-bitnami.gcs-staging-2.svc.cluster.local"
          - name: KAFKA_PORT
            value: "9092"
        resources:
          requests:
            memory: 4Gi
          limits:
            memory: 4Gi
  pipelines:
    - pipeline.id: nginx
      config.string: |
        input {
          kafka {
            bootstrap_servers => "${KAFKA_HOST}:${KAFKA_PORT}"
            topics => ["anon-filebeat-nginx"]
            decorate_events => "none"
            codec => "json"
            enable_auto_commit => true
            auto_offset_reset => "earliest"
            group_id => "logstash_SARAI_nginx_consumer_group"
          }
        }
        filter {
          if [message] == "" { drop {} }

          mutate {
            rename => {"[message]" => "[event][original]"}
            add_field => { 
              "[event][kind]" => "event" 
              "[event][module]" => "nginx"
              "[event][category]" => "web"
              "[event][type]" => "access"
              "[event][created]" => "%{+yyyy-MM-dd'T'HH:mm:ss.SSS'Z'}"
              "[event][dataset]" => "nginx.access"
            }
            add_tag => [ "nginx-access" ]
          }

          grok {
            match => { "[event][original]" => "%{SYSLOGBASE} (LEEF:%{NOTSPACE}\|%{WORD}\|%{WORD}\|%{DATA}\|%{NUMBER:[http][response][status_code]:int}\|)?%{GREEDYDATA:[data][raw]}" }
            remove_field => [ "timestamp" ]
          }

          kv {
            source => "[data][raw]"
            target => "[data]"
            field_split => "\t"
            value_split => "="
            allow_duplicate_values => false
            remove_field => [ "[data][raw]" ]
          }

          date {
            match => [ "[data][devTime]", "dd/MMM/yyyy:HH:mm:ss Z" ]
            target => "@timestamp"
            remove_field => [ "[data][devTime]", "[data][devTimeFormat]" ]
          }

          if [data][request] != "-" {
            grok { 
              match => { "[data][request]" => "%{WORD:[http][request][method]} %{GREEDYDATA:[url][original]} HTTP/%{NUMBER:[http][version]}" } 
              remove_field => [ "[data][request]", "[data][proto]" ]
              tag_on_failure => [ "nginx_request_grok_parse_failure" ]
            }
          }

          if [data][http_referer] != "-" { 
            mutate { rename => { "[data][http_referer]" => "[http][request][referrer]" } }
          }

          if [data][http_x_header] != "-" {
            mutate { rename => { "[data][http_x_header]" => "[nginx][access][http_x_header]" } }
          }

          if [data][usrName] != "-" {
            mutate { rename => { "[data][usrName]" => "[user][name]" } }
          }

          if [data][uri_path] != "-" {
            mutate { rename => { "[data][uri_path]" => "[url][path]" } }
          }

          if [data][uri_query] != "-" { 
            mutate { rename => { "[data][uri_query]" => "[url][query]" } }
          }

          if [data][cookie] != "-" {
            mutate { rename => { "[data][cookie]" => "[nginx][access][cookies]" } }
          }

          if [data][pipe] != "" {
            mutate { rename => { "[data][pipe]" => "[nginx][access][pipe]" } }
          }

          if [data][upstream_response_time] and [data][upstream_response_time] != "-" {
            ruby {
              code => '
                arr = event.get("[data][upstream_response_time]").split(", ")
                event.set("[nginx][access][upstream_response_time]", arr)
                event.remove("[data][upstream_response_time]")
              '
            }
            mutate { 
              convert => { "[nginx][access][upstream_response_time]" => "float" } 
            }
          }

          if [data][http_true_client_ip] and [data][http_true_client_ip] != "-" {
            mutate {
              rename => { "[data][http_true_client_ip]" => "[nginx][access][http_true_client_ip]" }
            }
            grok {
              match => { "[nginx][access][http_true_client_ip]" => "%{IP:[client][ip]}" }
              tag_on_failure => [ "nginx_true_client_ip_grok_parse_failure" ]
            }
          }

          if [data][http_x_forwarded_for] and [data][http_x_forwarded_for] != "-" {
            ruby {
              code => '
                arr = event.get("[data][http_x_forwarded_for]").split(", ")
                event.set("[nginx][access][http_x_forwarded_for]", arr)
                event.remove("[data][http_x_forwarded_for]")

                unless event.get("[client][ip]")
                  begin
                    client = arr[0].split(":")
                    client_ip = IPAddr.new(client[0])
                    client_port = client[1]
                  rescue IPAddr::Error
                  else
                    event.set("[client][ip]", client_ip.to_s)

                    if client_port
                      event.set("[client][port]", client_port.to_i)
                    end
                  end
                end
              '
            }
          }

          mutate {
            rename => {
              "[data][src]" => "[source][ip]"
              "[data][dst]" => "[destination][ip]"
              "[data][dstPort]" => "[destination][port]"
              "[data][http_user_agent]" => "[user_agent][original]"
              "[data][body_bytes_sent]" => "[http][response][body][bytes]"
              "[data][request_time]" => "[nginx][access][request_time]"
            }
            convert => {
              "[http][response][body][bytes]" => "integer"
              "[destination][port]" => "integer"
              "[nginx][access][request_time]" => "float"
            }
            copy => {
              "[process][name]" => "[event][provider]"
            }
          }

          if [http][response][status_code] {
            if [http][response][status_code] < 400 {
              mutate { add_field => { "[event][outcome]" => "success" } }
            } 
            else if [http][response][status_code] > 399 {
              mutate { add_field => { "[event][outcome]" => "failure" } }
            }
          }

          ruby {
            code => '
              url_original = event.get("[url][original]")
              
              dest_ip = event.get("[destination][ip]")
              dest_port = event.get("[destination][port]")

              if url_original.nil? || dest_ip.nil? || dest_port.nil?
                return
              end

              scheme = "unknown"
              if dest_port == 443
                scheme = "https"
              elsif dest_port == 80
                scheme = "http"
              end

              begin
                uri = URI::parse(url_original)

                if uri.host && uri.scheme                  
                  logger.warn("Look at me!!!!!!!! #{url_original}")

                  url_full = uri.to_s
                else
                  url_full = "#{scheme}://#{dest_ip}:#{dest_port}#{url_original}"
                  uri = URI::parse(url_full)
                end
              rescue URI::Error
                logger.warn("Failed to parse URI: #{event.get("[http][request][method]")} #{url_original}")
              else
                if uri.path
                  extension = File.extname(uri.path.to_s)
                  unless extension == ""
                    event.set("[url][extension]", extension[1..-1])
                  end
                end

                if uri.fragment
                  event.set("[url][fragment]", uri.fragment.to_s)
                end

                if uri.scheme
                  event.set("[url][scheme]", uri.scheme.to_s)
                end

                if uri.port
                  event.set("[url][port]", uri.port)
                end

                if uri.host
                  event.set("[url][domain]", uri.host)
                end

                event.set("[url][full]", url_full)
              end
            '
          }

          ruby {
            code => '
              if event.get("[nginx][access][request_time]")
                event.set("[event][duration]" , (event.get("[nginx][access][request_time]").to_f * 1000 * 1000).to_i)
              end
            '
          }

          ruby {
            code => '
              related_ips = []
              related_hosts = []
              related_user = []
              nginx_remote_ips = []

              if event.get("[source][ip]")
                related_ips.append(event.get("[source][ip]"))
                nginx_remote_ips.append(event.get("[source][ip]"))
              end

              if event.get("[destination][ip]")
                related_ips.append(event.get("[destination][ip]"))
              end

              if event.get("[nginx][access][http_true_client_ip]")
                related_ips.append(event.get("[nginx][access][http_true_client_ip]"))
                nginx_remote_ips.append(event.get("[nginx][access][http_true_client_ip]"))
              end

              if event.get("[nginx][access][http_x_forwarded_for]")
                event.get("[nginx][access][http_x_forwarded_for]").each { |proxy| 
                  proxy_ip = proxy.gsub(/:[0-9]+/, "")

                  begin
                    proxy_ip = IPAddr.new(proxy_ip)
                  rescue IPAddr::Error
                  else
                    related_ips.append(proxy_ip.to_s)
                    nginx_remote_ips.append(proxy_ip.to_s)
                  end
                }
              end

              if event.get("[host][hostname]")
                related_hosts.append(event.get("[host][hostname]"))
              end

              if event.get("[user][name]")
                related_user.append(event.get("[user][name]"))
              end

              related_ips.uniq!
              related_hosts.uniq!
              related_user.uniq!
              nginx_remote_ips.uniq!

              if related_ips.size() > 0
                event.set("[related][ip]", related_ips)
              end

              if related_hosts.size() > 0
                event.set("[related][hosts]", related_hosts)
              end

              if related_user.size() > 0
                event.set("[related][user]", related_user)
              end

              if nginx_remote_ips.size() > 0
                event.set("[nginx][access][remote_ip_list]", nginx_remote_ips)
              end
            '
          }

          useragent { 
            source => "[user_agent][original]" 
            target => "[user_agent]"
          }

          if [source][ip] {
            cidr {
              address => [ "%{[source][ip]}" ]
              network => [ "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "127.0.0.0/8", "fe80::/64" ]
              add_tag => [ "private_source_ip" ]
            }

            if "private_source_ip" not in [tags] {
              geoip {
                source => "[source][ip]"
                target => "[source]"
                default_database_type => "City"
              }
              geoip {
                source => "[source][ip]"
                target => "[source]"
                default_database_type => "ASN"
                fields => [ "AUTONOMOUS_SYSTEM_NUMBER", "AUTONOMOUS_SYSTEM_ORGANIZATION" ]
              }
            } 
          }
          
          if [destination][ip] {
            cidr {
              address => [ "%{[destination][ip]}" ]
              network => [ "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "127.0.0.0/8", "fe80::/64" ]
              add_tag => [ "private_destination_ip" ]
            }

            if "private_destination_ip" not in [tags] {
              geoip {
                source => "[destination][ip]"
                target => "[destination]"
                default_database_type => "City"
              }
              geoip {
                source => "[destination][ip]"
                target => "[destination]"
                default_database_type => "ASN"
                fields => [ "AUTONOMOUS_SYSTEM_NUMBER", "AUTONOMOUS_SYSTEM_ORGANIZATION" ]
              }
            }
          }

          if [client][ip] {
            cidr {
              address => [ "%{[client][ip]}" ]
              network => [ "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "127.0.0.0/8", "fe80::/64" ]
              add_tag => [ "private_client_ip" ]
            }

            if "private_client_ip" not in [tags] {
              geoip {
                source => "[client][ip]"
                target => "[client]"
                default_database_type => "City"
              }
              geoip {
                source => "[client][ip]"
                target => "[client]"
                default_database_type => "ASN"
                fields => [ "AUTONOMOUS_SYSTEM_NUMBER", "AUTONOMOUS_SYSTEM_ORGANIZATION" ]
              }
            }
          }

          mutate { 
            remove_field => [
              "[data]",
              "[agent]", 
              "[log]", 
              "[host][name]",
              "[input]"
            ] 
          }
        }
        output {
          elasticsearch {
            hosts => [ "${SARAI_ES_HOSTS}" ]
            user => "${SARAI_ES_USER}"
            password => "${SARAI_ES_PASSWORD}"
            ssl_certificate_authorities => [ "${SARAI_ES_SSL_CERTIFICATE_AUTHORITY}" ]
            data_stream => "true"
            data_stream_type => "logs"
            data_stream_dataset => "nginx.access"
            data_stream_namespace => "default"
          }
        }